[{"path":"/articles/Sampling_and_ML_estimation.html","id":"using-truncexpfam","dir":"Articles","previous_headings":"","what":"Using TruncExpFam","title":"Sampling and ML estimation","text":"recommend installing stable, peer-reviewed version TruncExpFam, available CRAN: successful installation, package can loaded ","code":"install.packages(\"TruncExpFam\") library(TruncExpFam) #> Welcome to TruncExpFam 1.1.0. #> Please read the documentation on ?TruncExpFam to learn more about the package."},{"path":"/articles/Sampling_and_ML_estimation.html","id":"sampling-from-a-truncated-distribution","dir":"Articles","previous_headings":"","what":"Sampling from a truncated distribution","title":"Sampling and ML estimation","text":"TruncExpFam comes equipped functions generate random samples less 12 different probability distributions truncated exponential family. can read running ?rtrunc R console. example, sample 100 values chi-square distribution 14 degrees freedom:","code":"x <- rtrunc(100, family = \"chisq\", df = 14)"},{"path":"/articles/Sampling_and_ML_estimation.html","id":"different-ways-to-do-the-same-thing","dir":"Articles","previous_headings":"Sampling from a truncated distribution","what":"Different ways to do the same thing","title":"Sampling and ML estimation","text":"default, however, rtrunc() doesn’t generate truncated distribution. matter fact, code generate exact sample drawn stats::rchisq(), watch: Oh, wait… objects supposed identical! happened? Let’s investigate: OK, can tell generated numbers , x2 x3 literally objects former different class. trunc_* classes actually special, contain extra information distribution simple vector . One can access information using print(x2, details = TRUE): Just sure sample matches: Speaking alternative ways generate sample, sake convenience users familiar sampling functions stats package, wrapper function rtruncchisq() also available. results, can see , identical:","code":"set.seed(3067) x2 <- rtrunc(20, \"chisq\", df = 14)  set.seed(3067) x3 <- rchisq(20, 14)  identical(x2, x3) #> [1] FALSE x2 #>  [1] 16.531982 10.021074 12.480308 16.165519 11.083118 32.684427 16.661472 #>  [8] 18.085124 10.921481 11.150269 10.673091 12.012880  7.986689  7.500130 #> [15] 10.951995  6.725427 10.789780  5.616512 20.081876  8.138363 x3 #>  [1] 16.531982 10.021074 12.480308 16.165519 11.083118 32.684427 16.661472 #>  [8] 18.085124 10.921481 11.150269 10.673091 12.012880  7.986689  7.500130 #> [15] 10.951995  6.725427 10.789780  5.616512 20.081876  8.138363 str(x2) #>  'trunc_chisq' num [1:20] 16.5 10 12.5 16.2 11.1 ... #>  - attr(*, \"parameters\")=List of 1 #>   ..$ df: num 14 #>  - attr(*, \"truncation_limits\")=List of 2 #>   ..$ a: num 0 #>   ..$ b: num Inf #>  - attr(*, \"continuous\")= logi TRUE str(x3) #>  num [1:20] 16.5 10 12.5 16.2 11.1 ... class(x2) #> [1] \"trunc_chisq\" class(x3) #> [1] \"numeric\" print(x2, details = TRUE) #>  [1] 16.531982 10.021074 12.480308 16.165519 11.083118 32.684427 16.661472 #>  [8] 18.085124 10.921481 11.150269 10.673091 12.012880  7.986689  7.500130 #> [15] 10.951995  6.725427 10.789780  5.616512 20.081876  8.138363 #> attr(,\"class\") #> [1] \"trunc_chisq\" #> attr(,\"parameters\") #> attr(,\"parameters\")$df #> [1] 14 #>  #> attr(,\"truncation_limits\") #> attr(,\"truncation_limits\")$a #> [1] 0 #>  #> attr(,\"truncation_limits\")$b #> [1] Inf #>  #> attr(,\"continuous\") #> [1] TRUE identical(as.vector(x2), x3) #> [1] TRUE set.seed(2912) x4 <- rtrunc(1e4, \"chisq\", df = 14)  set.seed(2912) x5 <- rtruncchisq(1e4, df = 14)  identical(x4, x5) #> [1] TRUE"},{"path":"/articles/Sampling_and_ML_estimation.html","id":"actually-sampling-from-a-truncated-distribution","dir":"Articles","previous_headings":"Sampling from a truncated distribution","what":"Actually sampling from a truncated distribution","title":"Sampling and ML estimation","text":"far, samples generated actually truncated. , default, truncation limits b set limits distribution support, 0 Inf chi-squared distribution. Let us use simpler distribution second example sampling Poisson(10): expected, values larger 0 mean variance 10. wanted generate instead Poisson(10) truncated , say, 8 20, run: Notice , even large sample, observed mean variance still quite far 10.","code":"y1 <- rtruncpois(1e4, 10) summary(y1) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    8.00   10.00   10.01   12.00   26.00 var(y1) #> [1] 10.04213 y2 <- rtruncpois(1e4, 10, a = 9, b = 20) summary(y2) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    9.00   10.00   11.00   11.63   13.00   20.00 var(y2) #> [1] 5.159541"},{"path":"/articles/Sampling_and_ML_estimation.html","id":"recovering-the-original-parameters","dir":"Articles","previous_headings":"","what":"Recovering the original parameters","title":"Sampling and ML estimation","text":"One reliable method estimating original lambda used generate y2 running mlEstimationTruncDist() function: information function can tweak available ?mlEstimationTruncDist.","code":"lambda <- mlEstimationTruncDist(y2, print.iter = TRUE) #> Estimating parameters for the poisson distribution #>  it   delta.L2    parameter(s) #>  1    0.0007325   11.626  #>  2    0.0005043   11.315  #>  3    0.0003465   11.064  #>  4    0.0002378   10.86  #>  5    0.0001631   10.694  #>  6    0.0001119   10.558  #>  7    7.674e-05   10.447  #>  8    5.264e-05   10.356  #>  9    3.611e-05   10.281  #> 10    2.478e-05   10.219  #> 11      1.7e-05   10.169  #> 12    1.167e-05   10.127  #> 13    8.007e-06   10.092 lambda #>   lambda  #> 10.06366"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"René Holst. Author. Waldir Leoncio. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Holst R, Leoncio W (2023). TruncExpFam: Truncated Exponential Family. R package version 1.1.0, https://ocbe-uio.github.io/TruncExpFam/.","code":"@Manual{,   title = {TruncExpFam: Truncated Exponential Family},   author = {René Holst and Waldir Leoncio},   year = {2023},   note = {R package version 1.1.0},   url = {https://ocbe-uio.github.io/TruncExpFam/}, }"},{"path":"/index.html","id":"what-is-this","dir":"","previous_headings":"","what":"Truncated Exponential Family","title":"Truncated Exponential Family","text":"R package handle truncated members exponential family.","code":""},{"path":[]},{"path":"/index.html","id":"stable-version","dir":"","previous_headings":"","what":"Stable version","title":"Truncated Exponential Family","text":"TruncExpFam available CRAN can installed running following interactive R session:","code":"install.packages(\"TruncExpFam\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Truncated Exponential Family","text":"development version package contains features bug fixes yet published. , however, much less stable CRAN version. can install development version TruncExpFam running following command R (requires remotes package installed beforehand): want browse vignette, add build_vignettes = TRUE install_github() command. details installing TruncExpFam can found Wiki.","code":"remotes::install_github(\"ocbe-uio/TruncExpFam\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Truncated Exponential Family","text":"installed, TruncExpFam can loaded library(TruncExpFam). list available functions can printed ls(\"package:TruncExpFam\"). information package (e.g. suppored distributions), run ?TruncExpFam loading package R session. familiar stats package r* d* functions rnorm() dpois()? , feel right home TruncExpFam, uses rtrunc() function generate random numbers dtrunc() function generate probability densities. detailed explanation use package’s features, check vignette:","code":"browseVignettes(\"TruncExpFam\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Truncated Exponential Family","text":"TruncExpFam open-source software licensed GPL. contributions welcome! Please use issues page submit bugs find see issues submitted. contribute code, recommend reading Wiki page subject.","code":""},{"path":"/index.html","id":"citing","dir":"","previous_headings":"","what":"Citing","title":"Truncated Exponential Family","text":"present work uses package, please remember cite . cite TruncExpFam publications, use output citation(\"TruncExpFam\") R session.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/TruncExpFam.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated Exponential Family — TruncExpFam","title":"Truncated Exponential Family — TruncExpFam","text":"TruncExpFam R package handle truncated members exponential family.","code":""},{"path":"/reference/TruncExpFam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated Exponential Family — TruncExpFam","text":"package offers truncated counterparts density-, distribution-, quantile- sampling-functions broad range distributions exponential family, implemented stats package. package also provides functions estimating parameters distributions data, given truncation limits. info, please check rtrunc(), dtrunc() print.trunc(). Counterparts density probability functions roadmap future release.","code":""},{"path":"/reference/TruncExpFam.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Truncated Exponential Family — TruncExpFam","text":"Found bug? Want suggest feature? Contribute scientific open source communities opening issue home page. Check \"BugReports\" field packageDescription(\"TruncExpFam\") URL.","code":""},{"path":"/reference/TruncExpFam.html","id":"supported-distributions","dir":"Reference","previous_headings":"","what":"Supported distributions","title":"Truncated Exponential Family — TruncExpFam","text":"Beta Binomial Chi-Square Continuous Bernoulli Exponential Gamma Inverse Gamma Inverse Gaussian Log-normal Negative Binomial Normal Poisson","code":""},{"path":[]},{"path":"/reference/TruncExpFam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Truncated Exponential Family — TruncExpFam","text":"Maintainer: Waldir Leoncio w.l.netto@medisin.uio.Authors: René Holst rene.holst@medisin.uio.","code":""},{"path":"/reference/averageT.html","id":null,"dir":"Reference","previous_headings":"","what":"Averages out the sufficient statistics T(y) — averageT","title":"Averages out the sufficient statistics T(y) — averageT","text":"Takes vector values returns column average sufficient statistic (determined class)","code":""},{"path":"/reference/averageT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Averages out the sufficient statistics T(y) — averageT","text":"","code":"averageT(y)"},{"path":"/reference/averageT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Averages out the sufficient statistics T(y) — averageT","text":"y vector values","code":""},{"path":"/reference/averageT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Averages out the sufficient statistics T(y) — averageT","text":"vector average sufficient statistics","code":""},{"path":"/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints welcome message on package load — .onAttach","title":"Prints welcome message on package load — .onAttach","text":"Prints package version number welcome message package load","code":""},{"path":"/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints welcome message on package load — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints welcome message on package load — .onAttach","text":"libname library location. See ?base::.onAttach details pkgname package name. See ?base::.onAttach details","code":""},{"path":"/reference/dtrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density Function — dtruncbeta","title":"Probability Density Function — dtruncbeta","text":"Calculates PDF given truncated distribution","code":""},{"path":"/reference/dtrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density Function — dtruncbeta","text":"","code":"dtruncbeta(y, shape1, shape2, eta, a = 0, b = 1, ...)  dtruncbinom(y, size, prob, eta, a = 0, b = attr(y, \"parameters\")$size, ...)  dtruncchisq(y, df, eta, a = 0, b = Inf, ...)  dtrunccontbern(y, lambda, eta, a = 0, b = 1, ...)  dtrunccontbern(y, lambda, eta, a = 0, b = 1, ...)  dtruncexp(y, rate = 1, eta, a = 0, b = Inf, ...)  dtruncgamma(y, shape, rate = 1, scale = 1/rate, eta, a = 0, b = Inf, ...)  dtrunc(y, ...)  dtruncinvgamma(y, shape, rate = 1, scale = 1/rate, eta, a = 0, b = Inf, ...)  dtruncinvgauss(y, m, s, eta, a = 0, b = Inf, ...)  dtrunclnorm(y, meanlog = 0, sdlog = 1, eta, a = 0, b = Inf, ...)  # S3 method for trunc_nbinom dtrunc(y, size, prob, eta, a = 0, b = Inf, ...)  dtruncnbinom(y, size, prob, eta, a = 0, b = Inf, ...)  dtruncnbinom(y, size, prob, eta, a = 0, b = Inf, ...)  dtruncnorm(y, mean = 0, sd = 1, eta, a = -Inf, b = Inf, ...)  dtruncpois(y, lambda, eta, a = 0, b = Inf, ...)"},{"path":"/reference/dtrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density Function — dtruncbeta","text":"y output rtrunc valid numeric value(s). shape1 positive shape parameter alpha shape2 positive shape parameter beta eta vector natural parameters point left truncation b point right truncation ... size size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial df degrees freedom \"parent\" distribution lambda mean var \"parent\" distribution rate inverse gamma rate parameter shape inverse gamma shape parameter scale inverse gamma scale parameter m vector means s vector dispersion parameters meanlog mean un-truncated distribution sdlog standard deviation un-truncated distribution mean mean parent distribution sd standard deviation parent distribution","code":""},{"path":"/reference/dtrunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density Function — dtruncbeta","text":"density y given values eta parameter.","code":""},{"path":"/reference/dtrunc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Probability Density Function — dtruncbeta","text":"Either common natural parameters must provided.","code":""},{"path":"/reference/dtrunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Density Function — dtruncbeta","text":"","code":"# Using the output of rtrunc y <- rtrunc(50, mean = 5, sd = 2) dtrunc(y, eta = c(0, -1)) #>  [1] 1.541937e-03 1.516136e-14 7.281693e-09 1.608385e-12 5.758350e-06 #>  [6] 9.532056e-07 5.898802e-12 7.193656e-23 3.879641e-21 8.583961e-09 #> [11] 4.889517e-01 1.045403e-05 7.958695e-10 1.501012e-12 3.167504e-08 #> [16] 2.504583e-24 1.628453e-21 1.486600e-11 4.979495e-15 3.754201e-19 #> [21] 9.927216e-02 1.088125e-10 8.187891e-10 1.978259e-21 7.890745e-14 #> [26] 1.116393e-10 4.829750e-25 1.316257e-10 9.055831e-05 2.358995e-19 #> [31] 8.913979e-06 5.781013e-07 3.272734e-02 9.964500e-28 2.377022e-24 #> [36] 2.304182e-22 2.798979e-06 1.468778e-05 3.435643e-22 2.478521e-05 #> [41] 1.643322e-22 1.492212e-09 1.187803e-10 1.670258e-11 1.195956e-23 #> [46] 1.192451e-03 2.622214e-06 5.886634e-02 3.837980e-17 6.516522e-25  # Directly-inputting values dtruncnorm(y = c(5, 0, -10), eta = c(0, -0.05)) #> [1] 0.0361444785 0.1261566261 0.0008500367"},{"path":"/reference/empiricalParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate empirical parameters — empiricalParameters","title":"Calculate empirical parameters — empiricalParameters","text":"Returns empirical parameter estimate distribution","code":""},{"path":"/reference/empiricalParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate empirical parameters — empiricalParameters","text":"","code":"empiricalParameters(y, ...)"},{"path":"/reference/empiricalParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate empirical parameters — empiricalParameters","text":"y output rtrunc ... arguments passed methods","code":""},{"path":"/reference/empiricalParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate empirical parameters — empiricalParameters","text":"vector parameter estimates input sample","code":""},{"path":"/reference/empiricalParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate empirical parameters — empiricalParameters","text":"","code":"# Normal distribution sampNorm <- rtrunc(50, mean = 5, sd = 2) empiricalParameters(sampNorm) #>     mean       sd  #> 4.809989 1.963950  #> attr(,\"class\") #> [1] \"parms_normal\"  # Poisson distribution sampPois <- rtrunc(10, lambda = 100, family = \"Poisson\") empiricalParameters(sampPois) #> lambda  #>   99.3  #> attr(,\"class\") #> [1] \"parms_poisson\""},{"path":"/reference/empiricalParameters.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameters — empiricalParameters.numeric","title":"Extract parameters — empiricalParameters.numeric","text":"Extract parameters","code":""},{"path":"/reference/empiricalParameters.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameters — empiricalParameters.numeric","text":"","code":"# S3 method for numeric empiricalParameters(y, family = \"gaussian\", natural = FALSE, ...)"},{"path":"/reference/empiricalParameters.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parameters — empiricalParameters.numeric","text":"y Numeric vector containing observations random variable family Distribution family assume y natural output terms natural parameter eta? ... arguments passed empiricalParameters()","code":""},{"path":"/reference/empiricalParameters.numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract parameters — empiricalParameters.numeric","text":"","code":"# Some random data x <- c(   4, 3, 6, 3, 3, 3, 3, 4, 3, 2, 3, 0, 4, 2, 0, 1, 4, 3, 0, 0, 2, 3, 0, 3, 7,   2, 1, 1, 2, 3, 2, 3, 3, 3, 2, 2, 2, 0, 2, 0, 2, 1, 0, 2, 3, 1, 0, 4, 2, 2,   0, 1, 1, 1, 2, 2, 3, 1, 3, 1, 1, 0, 3, 3, 2, 0, 2, 2, 3, 0, 2, 1, 0, 0, 1,   0, 2, 4, 2, 3, 3, 0, 1, 0, 5, 2, 4, 2, 7, 4, 4, 1, 2, 4, 3, 2, 4, 3, 1, 3 )  # Extracting parameters under different distribution assumptions empiricalParameters(x, family = \"normal\") #>    mean      sd  #> 2.12000 1.52607  #> attr(,\"class\") #> [1] \"parms_normal\" empiricalParameters(x, family = \"normal\", natural = TRUE) #>       eta1       eta2  #>  0.9103053 -0.2146947  #> attr(,\"class\") #> [1] \"parms_normal\" empiricalParameters(x, family = \"binomial\", nsize = max(x)) #>      size      prob  #> 7.0000000 0.3028571  #> attr(,\"class\") #> [1] \"parms_binomial\" empiricalParameters(x, family = \"poisson\", natural = FALSE) #> lambda  #>   2.12  #> attr(,\"class\") #> [1] \"parms_poisson\" empiricalParameters(x, family = \"poisson\", natural = TRUE) #>       eta  #> 0.7514161  #> attr(,\"class\") #> [1] \"parms_poisson\""},{"path":"/reference/genrtruncClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an rtrunc-dispatchable class — genrtruncClass","title":"Generates an rtrunc-dispatchable class — genrtruncClass","text":"Matches list arguments rtrunc method","code":""},{"path":"/reference/genrtruncClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an rtrunc-dispatchable class — genrtruncClass","text":"","code":"genrtruncClass(n, family, parms)"},{"path":"/reference/genrtruncClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an rtrunc-dispatchable class — genrtruncClass","text":"n sample size family distribution family parms list parameters passed rtrunc (... element)","code":""},{"path":"/reference/genrtruncClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an rtrunc-dispatchable class — genrtruncClass","text":"character string.","code":""},{"path":"/reference/genrtruncClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates an rtrunc-dispatchable class — genrtruncClass","text":"Waldir Leoncio","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":null,"dir":"Reference","previous_headings":"","what":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"ML-estimation parameters distribution specified family, truncated y.min y.max","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"","code":"mlEstimationTruncDist(   y,   y.min = attr(y, \"truncation_limits\")$a,   y.max = attr(y, \"truncation_limits\")$b,   tol = 1e-05,   max.it = 100,   delta = 0.33,   print.iter = 0,   ny = 100,   family = NULL,   ... )"},{"path":"/reference/mlEstimationTruncDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"y Sequence spanning domain truncated distribution y.min Lower bound y y.max Upper bound y tol Error tolerance parameter estimation max.Maximum number iterations delta Indirectly, difference consecutive iterations compare error tolerance print.iter Determines frequency printing (.e., prints every print.iter iterations) ny size intermediate y range sequence. Higher values yield better estimations slower iterations family distribution family use ... parameters passed subfunctions","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"vector class trunc_* containing maximum-likelihood estmation underlying distribution * parameters.","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"print.iter = TRUE, function prints iteration, sum squares delta.eta.j (delta.L2), current parameter estimates. delta argument function factor calculation delta.eta.j, turn factor calculation delta.L2.","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"Inspired Salvador: Pueyo: \"Algorithm maximum likelihood estimation parameters truncated normal lognormal distributions\"","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"René Holst","code":""},{"path":"/reference/mlEstimationTruncDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ML Estimation of Distribution Parameters — mlEstimationTruncDist","text":"","code":"sample_size <- 1000 # Normal sample.norm <- rtrunc(n = sample_size, mean = 2, sd = 1.5, a = -1) mlEstimationTruncDist(   sample.norm,   y.min = -1, max.it = 500, delta = 0.33,   print.iter = TRUE ) #> Estimating parameters for the normal distribution #>  it\t delta.L2\t parameter(s) #>  1 \t  0.001339 \t 2.085 1.394  #>  2 \t  0.000712 \t 2.069 1.412  #>  3 \t 0.0003973 \t 2.057 1.426  #>  4 \t 0.0002296 \t 2.048 1.437  #>  5 \t 0.0001361 \t 2.04 1.445  #>  6 \t  8.22e-05 \t 2.035 1.452  #>  7 \t 5.039e-05 \t 2.03 1.457  #>  8 \t 3.124e-05 \t 2.027 1.461  #>  9 \t 1.954e-05 \t 2.024 1.464  #> 10 \t  1.23e-05 \t 2.022 1.467  #> 11 \t 7.788e-06 \t 2.02 1.469  #>     mean       sd  #> 2.018574 1.470391   # Log-Normal sample.lognorm <- rtrunc(   n = sample_size, family = \"lognormal\", meanlog = 2.5, sdlog = 0.5, a = 7 ) ml_lognormal <- mlEstimationTruncDist(   sample.lognorm,   y.min = 7, max.it = 500, tol = 1e-10, delta = 0.3,   print.iter = FALSE ) ml_lognormal #>   meanlog     sdlog  #> 2.5119192 0.4703477   # Poisson sample.pois <- rtrunc(  n = sample_size, lambda = 10, a = 4, family = \"Poisson\" ) mlEstimationTruncDist(   sample.pois,   y.min = 4, max.it = 500, delta = 0.33,   print.iter = 5 ) #> Estimating parameters for the poisson distribution #>  it\t delta.L2\t parameter(s) #>  lambda  #> 10.1341   # Gamma sample.gamma <- rtrunc(  n = sample_size, shape = 6, rate = 2, a = 2, family = \"Gamma\" ) mlEstimationTruncDist(   sample.gamma,   y.min = 2, max.it = 1500, delta = 0.3,   print.iter = 10 ) #> Estimating parameters for the gamma distribution #>  it\t delta.L2\t parameter(s) #>  10 \t   0.01638 \t 7.668 2.373  #>  20 \t  0.003152 \t 6.804 2.159  #>  30 \t 0.0008834 \t 6.393 2.055  #>  40 \t 0.0003009 \t 6.165 1.997  #>  50 \t 0.0001141 \t 6.029 1.963  #>  60 \t 4.609e-05 \t 5.944 1.941  #>  70 \t 1.936e-05 \t 5.89 1.927  #>    shape     rate  #> 5.857061 1.919191   # Negative binomial sample.nbinom <- rtruncnbinom(  sample_size, size = 50, prob = .3, a = 100, b = 120 ) mlEstimationTruncDist(sample.nbinom, r=10) #> Warning: Maximum number of iterations reached. Convergence is not guaranteed. You might want to run again with a higher value for max.it #>     mean  #> 64.32786"},{"path":"/reference/natural2parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert natural parameters to distribution parameters — natural2parameters","title":"Convert natural parameters to distribution parameters — natural2parameters","text":"Convert natural parameters distribution parameters","code":""},{"path":"/reference/natural2parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert natural parameters to distribution parameters — natural2parameters","text":"","code":"natural2parameters(eta, ...)"},{"path":"/reference/natural2parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert natural parameters to distribution parameters — natural2parameters","text":"eta vector natural parameters ... arguments passed methods","code":""},{"path":"/reference/natural2parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert natural parameters to distribution parameters — natural2parameters","text":"vector original distribution parameters","code":""},{"path":[]},{"path":"/reference/natural2parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert natural parameters to distribution parameters — natural2parameters","text":"","code":"samp <- rtrunc(n = 100, lambda = 2, family = \"Poisson\") lambda_hat <- empiricalParameters(samp) eta_hat <- parameters2natural(lambda_hat) natural2parameters(eta_hat)  # yields back lambda #> lambda  #>   2.05  #> attr(,\"class\") #> [1] \"parms_poisson\""},{"path":"/reference/parameters2natural.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert distribution parameters to natural parameters — parameters2natural","title":"Convert distribution parameters to natural parameters — parameters2natural","text":"Convert distribution parameters natural parameters","code":""},{"path":"/reference/parameters2natural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert distribution parameters to natural parameters — parameters2natural","text":"","code":"parameters2natural(parms, ...)"},{"path":"/reference/parameters2natural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert distribution parameters to natural parameters — parameters2natural","text":"parms vector parameters distribution distribution ... arguments passed methods","code":""},{"path":"/reference/parameters2natural.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert distribution parameters to natural parameters — parameters2natural","text":"vector containing natural parameters","code":""},{"path":[]},{"path":"/reference/parameters2natural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert distribution parameters to natural parameters — parameters2natural","text":"","code":"# Poisson distribution samp <- rtrunc(n = 100, lambda = 2, family = \"Poisson\") parameters2natural(empiricalParameters(samp)) #>       eta  #> 0.5481214  #> attr(,\"class\") #> [1] \"parms_poisson\""},{"path":"/reference/print.trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print sample from truncated distribution — print.trunc","title":"Print sample from truncated distribution — print.trunc","text":"Special printing methods trunc_* classes.","code":""},{"path":"/reference/print.trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print sample from truncated distribution — print.trunc","text":"","code":"# S3 method for trunc print(x, details = FALSE, ...)"},{"path":"/reference/print.trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print sample from truncated distribution — print.trunc","text":"x object print details FALSE (default), hides attributes x ... arguments passed print.default","code":""},{"path":"/reference/print.trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print sample from truncated distribution — print.trunc","text":"x without attributes","code":""},{"path":"/reference/print.trunc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print sample from truncated distribution — print.trunc","text":"Waldir Leoncio","code":""},{"path":"/reference/probdist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability distribution class — probdist-class","title":"Probability distribution class — probdist-class","text":"R object describing properties probability distribution.","code":""},{"path":"/reference/probdist-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability distribution class — probdist-class","text":"RC class containing statistical properties distribution, namely name, parameter names values natural parameter names values.","code":""},{"path":"/reference/probdist-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability distribution class — probdist-class","text":"Waldir Leoncio","code":""},{"path":"/reference/probdist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability distribution class — probdist-class","text":"","code":"probdist(shape = 2, scale = .25, family = \"gamma\") #> Family:             Gamma #> Parameters:         shape = 2    scale = 0.25  #> Natural parameters: eta1  = 1    eta2  = -4    probdist(mean = 2, sd = 10, family = \"normal\") #> Family:             Normal #> Parameters:         mean = 2      sd   = 10      #> Natural parameters: eta1 = 0.02   eta2 = -0.005  probdist(eta1 = 2, eta2 = -1, family = \"normal\") #> Family:             Normal #> Parameters:         mean = 1                 sd   = 0.7071             #> Natural parameters: eta1 = 2                 eta2 = -1"},{"path":"/reference/rtrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"The Truncated Exponential Family — rtrunc","title":"The Truncated Exponential Family — rtrunc","text":"Random generation truncated exponential family distributions. Please ferer \"Details\" \"Examples\" section information use function.","code":""},{"path":"/reference/rtrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Truncated Exponential Family — rtrunc","text":"","code":"rtrunc(n, family = \"gaussian\", faster = FALSE, ...)  rtrunc.beta(n, shape1, shape2, a = 0, b = 1)  rtruncbeta(n, shape1, shape2, a = 0, b = 1)  rtruncbinom(n, size, prob, a = 0, b = size)  rtruncchisq(n, df, a = 0, b = Inf)  rtrunccontbern(n, lambda, a = 0, b = 1)  rtruncexp(n, rate = 1, a = 0, b = Inf)  rtruncgamma(n, shape, rate = 1, scale = 1/rate, a = 0, b = Inf)  rtruncinvgamma(n, shape, rate = 1, scale = 1/rate, a = 0, b = Inf)  rtruncinvgauss(n, m, s, a = 0, b = Inf)  rtrunclnorm(n, meanlog, sdlog, a = 0, b = Inf)  rtruncnbinom(n, size, prob, mu, a = 0, b = Inf)  rtruncnorm(n, mean, sd, a = -Inf, b = Inf)  rtruncpois(n, lambda, a = 0, b = Inf)  rtrunc_direct(n, family = \"gaussian\", ...)"},{"path":"/reference/rtrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Truncated Exponential Family — rtrunc","text":"n sample size family distribution family use faster TRUE, samples directly truncated distribution (info details) ... individual arguments distribution shape1 positive shape parameter alpha shape2 positive shape parameter beta point left truncation b point right truncation size target number successful trials, dispersion parameter (shape parameter gamma mixing distribution). Must strictly positive, need integer. prob probability success trial df degrees freedom \"parent\" distribution lambda mean var \"parent\" distribution rate inverse gamma rate parameter shape inverse gamma shape parameter scale inverse gamma scale parameter m vector means s vector dispersion parameters meanlog mean un-truncated distribution sdlog standard deviation un-truncated distribution mu alternative parametrization via mean mean mean parent distribution sd standard deviation parent distribution","code":""},{"path":"/reference/rtrunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Truncated Exponential Family — rtrunc","text":"sample size n drawn truncated distribution vector one rtrunc_* classes containing sample elements, well attributes related chosen distribution.","code":""},{"path":"/reference/rtrunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Truncated Exponential Family — rtrunc","text":"One way use function calling rtrunc generic family parameter choice. can also specifically call one methods (e.g. rtruncpois(10, lambda=3) instead `rtrunc(10, family=\"poisson\", lambda=3)). latter flexible (.e., easily programmable) robust (.e., contains better error handling validation procedures), former better conforms nomenclature distribution-related functions stats package. Setting faster=TRUE uses new algorithm samples directly truncated distribution, opposed old algorithm samples untruncated distribution truncates result. advantage new algorithm way faster old one, particularly highly-truncated distributions. hand, sample untruncated distributions called rtrunc() longer match stats-package counterparts seed.","code":""},{"path":"/reference/rtrunc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The Truncated Exponential Family — rtrunc","text":"current sample-generating algorithm may slow distribution largely represented low-probability values. fixed soon. Please follow https://github.com/ocbe-uio/TruncExpFam/issues/72 details.","code":""},{"path":"/reference/rtrunc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Truncated Exponential Family — rtrunc","text":"René Holst, Waldir Leôncio","code":""},{"path":"/reference/rtrunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Truncated Exponential Family — rtrunc","text":"","code":"# Truncated binomial distribution sample.binom <- rtrunc(   100, family = \"binomial\", prob = 0.6, size = 20, a = 4, b = 10 ) sample.binom #>   [1]  9  7 10  9 10  7 10 10 10 10  6 10  9 10  9 10  8 10  8 10  7 10 10  8 10 #>  [26]  9 10  8  8  9 10  9 10  9  8 10  8 10  9 10 10 10 10 10  7  9 10  8  8  9 #>  [51] 10  9  9  9 10 10 10  9 10  9 10  8  9  7  8 10 10 10  9  8  7 10 10 10  9 #>  [76]  9  9 10  8 10 10 10 10  9  9 10  9  7 10 10 10  9  6 10  9 10  9 10 10  9 plot(   table(sample.binom), ylab = \"Frequency\", main = \"Freq. of sampled values\" )   # Truncated Log-Normal distribution sample.lognorm <- rtrunc(   n = 100, family = \"lognormal\", meanlog = 2.5, sdlog = 0.5, a = 7 ) summary(sample.lognorm) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   7.027   9.573  12.782  14.837  19.493  40.275   hist(   sample.lognorm,   nclass = 35, xlim = c(0, 60), freq = FALSE,   ylim = c(0, 0.15) )   # Normal distribution sample.norm <- rtrunc(n = 100, mean = 2, sd = 1.5, a = -1) head(sample.norm) #> [1]  2.28238665  3.82725376 -0.04769704  2.26502292  1.62591037  2.95523021 hist(sample.norm, nclass = 25)   # Gamma distribution sample.gamma <- rtrunc(n = 100, family = \"gamma\", shape = 6, rate = 2, a = 2) hist(sample.gamma, nclass = 15)   # Poisson distribution sample.pois <- rtrunc(n = 10, family = \"poisson\", lambda = 10, a = 4) sample.pois #>  [1] 11  9  5 14 17  7  7 10 14  6 plot(table(sample.pois))"},{"path":"/reference/validateFamilyParms.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate family parameters — validateFamilyParms","title":"Validate family parameters — validateFamilyParms","text":"Checks combination distribution family parameters valid.","code":""},{"path":"/reference/validateFamilyParms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate family parameters — validateFamilyParms","text":"","code":"validateFamilyParms(family, parms)"},{"path":"/reference/validateFamilyParms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate family parameters — validateFamilyParms","text":"family character family distribution name parms character vector distribution parameter names","code":""},{"path":"/reference/validateFamilyParms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate family parameters — validateFamilyParms","text":"list telling family-parm combo valid + family name","code":""},{"path":"/reference/validateFamilyParms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate family parameters — validateFamilyParms","text":"Waldir Leoncio","code":""},{"path":"/news/index.html","id":"truncexpfam-110","dir":"Changelog","previous_headings":"","what":"TruncExpFam 1.1.0","title":"TruncExpFam 1.1.0","text":"Added NEWS.md file track changes package. Added support simple numeric-class vectors mlEstimationTruncDist() (issue #95) Improved linting (issue #83) Improved unit test coverage (issues #66, #82) Improved output format (issues #89, #94) Improved documentation (issue #86) Improved ML estimation (issues #84, #85, #90, #92) Improved parameter parsing (issue #74) Simplified codebase (issues #91, #77, #78) Added vignette (issue #53) Enabled usage parameters2natural() natural2parameters() numeric vectors (issue #88) Faster calculation rtrunc() continuous distributions (issue #78) Faster calculation rtrunc() discrete distributions (issue #77) Created package page https://ocbe-uio.github.io/TruncExpFam/ (issues #100, #101) Reclassified eta parms arguments parms_* instead trunc_* (issue #97)","code":""},{"path":"/news/index.html","id":"truncexpfam-101","dir":"Changelog","previous_headings":"","what":"TruncExpFam 1.0.1","title":"TruncExpFam 1.0.1","text":"CRAN release: 2023-08-22 Hotfix package documentation (https://github.com/r-lib/roxygen2/issues/1491) Improved argument consistency generic methods","code":""},{"path":"/news/index.html","id":"truncexpfam-100","dir":"Changelog","previous_headings":"","what":"TruncExpFam 1.0.0","title":"TruncExpFam 1.0.0","text":"CRAN release: 2022-02-24 CRAN debut","code":""}]
